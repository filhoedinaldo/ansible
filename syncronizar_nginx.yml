- name: Sincronizar arquivos e gerenciar Nginx
  hosts: "{{ target_host | default('vm2') }}"  # Definição do host como variável
  become: yes
  vars:
    origem_sync: "192.168.100.101"  # define servidor origem

  tasks:

    - name: Sincronizar diretório de configuração do Nginx
      ansible.builtin.synchronize:
        src: "/etc/nginx/sites-available/"
        dest: "/etc/nginx/sites-available/"
        archive: yes
        compress: yes
        delete: yes
      delegate_to: "{{ origem_sync }}"
      register: nginx_sync_result

    - name: Sincronizar diretório da aplicação web
      ansible.builtin.synchronize:
        src: "/var/www/html/"
        dest: "/var/www/html/"
        archive: yes
        compress: yes
        delete: yes
      delegate_to: "{{ origem_sync }}"
      register: html_sync_result

    - name: Criar backup do diretório de configuração atual
      archive:
        path: /etc/nginx/sites-available
        dest: /etc/nginx/backup_sites-available_{{ ansible_date_time.iso8601 }}.tar.gz
        format: gz
      when: nginx_sync_result.changed or html_sync_result.changed
      ignore_errors: yes  # Evita falha se o diretório não existir

    - name: Testar configuração do Nginx antes de reiniciar
      command: nginx -t
      register: nginx_test
      changed_when: nginx_test.rc != 0
      ignore_errors: no
      notify: Reiniciar Nginx  # Chama o handler apenas se houver mudanças

  handlers:
    - name: Reiniciar Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
